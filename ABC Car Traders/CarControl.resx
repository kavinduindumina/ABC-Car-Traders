<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAABGdBTUEAALGPC/xhBQAAAURQTFRF////
        Vkj////9//7/VUz////7VVH+Vk//VUr/VUf/+ff9VFz/VGL/Tj/kVWX/VF7+VFn/VFX/VGj/VG7////4
        ZVrs+v//UoP/Uof/Uj//UnL+Um3/VGn+rrrqU0P/hobrop3k6+v6UoD/VHz/U3j/Uon+7vj9o7Doh43t
        0cv4SDb0+fb/WILwSnX30uL41+f3TFbnlKbmmpLnRGvwhpLuSjft5OL50MruqqXhRjXkOCXdwr/s6fL9
        tMfum7bqf6HkaJHrQnjxUn7vZYnrfZnlvNPzpcDpa5Xpja/rX4nrXn7nQGPwV4bpk6TpTmzmdIbkTlvl
        ZG7eWl/gsLfpRknjTW7jkpfmYXrqTz/eeYnaiIXcdnDZxrzpc2nj39v3p5/jiYPuwrz3bmDrd2vspJvw
        U0PVPCjXcmTagXjY6uP/f3bqk4jwJbODkgAAExtJREFUeF7tnftbE8nWhbsraegEIuEWCZdAREE6CggT
        QkxAZWCOg6JMiMiIhIuH0eP3///+rbWrOhcZFXUmic9TLxrSlU53rd679t5V3c44FovFYrFYLBaLxWKx
        WCwWi8VisVgsFovFYrFYLBaLxWKxWCwWi8VisVgsFss/gdIvSn4TvPcUwDs219v1nj8hEem5xxeti9up
        ubmykEqJTnysVCQiH3sqgtefCXRdVIjlnLnFjc1Hj+9tPTFs/bq9ubFYhjDH87ATNEZ+NoVaHi1X3nn6
        +N6Tm3VukdnZ27fvv9rd24BK6tO7/kzQLBHPSy399p97WzfHxvBnrK5wts7t+y92N5dSHt35J1MI91Nq
        bmP7HpSN3eGLCBT73Zqti7wNxld/nSrDqX8ehTICYZSlp8+pTeRB2009AO/d29p6ch9QnGF8fHV7iQNW
        hiKdtsuJsLOLj7bu3LkDffDPW0+2ft/e3Fkqz6Vkh9RceWlnc3v3xfi4FgievVxk0FUePu9yjeiep5Ye
        bUGc9s4nj5/uSDyRfvNVYhAo7zzYXYVKKhyegEbJmZJiuhkMqLnNe2MwIO239fi3pZQRJyoN3GCiSC1N
        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
        dn4aUvJhvMYAAAAASUVORK5CYII=
</value>
  </data>
</root>